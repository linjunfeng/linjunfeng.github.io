<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jeff</title>
    <link>http://blog.dadajun.com/post/</link>
    <description>Recent content in Posts on Jeff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Apr 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.dadajun.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Php curl 设置 Proxy</title>
      <link>http://blog.dadajun.com/4/102/</link>
      <pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dadajun.com/4/102/</guid>
      <description>&lt;p&gt;业务需要， 经常要去google 采集一些图片。 同一个ip经常被封。 所以配置百来个代理ip用来随机。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

//随机一个代理
function get_proxy_info($filename) {
    $ips = file($filename);

    shuffle($ips);
    $proxy = array_pop($ips);

    return explode(&#39;:&#39;, $proxy, 3);
}

$url = &#39;http://ipinfo.io/&#39;;
$proxy = get_proxy_info(&#39;ip.txt&#39;);
list($ip, $port, $userpwd,) = $proxy;

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);
curl_setopt($ch, CURLOPT_FOLLOWLOCATION, false);
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);

curl_setopt($ch, CURLOPT_PROXYAUTH, CURLAUTH_BASIC);
curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_HTTP);
curl_setopt($ch, CURLOPT_PROXY, $ip);
curl_setopt($ch, CURLOPT_PROXYPORT, $port);
curl_setopt($ch, CURLOPT_PROXYUSERPWD, trim($userpwd));

$result = curl_exec($ch);
curl_close($ch);

echo $result;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>wordpress xmlrpc</title>
      <link>http://blog.dadajun.com/2/101/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dadajun.com/2/101/</guid>
      <description>&lt;p&gt;Wordpress xmlrpc 实际上也是用了IXR 类库。wp_xmlrpc_server 继承了IXR_Server。 业务逻辑基本上在 wp_xmlrpc_server 上。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
//简单远程发布文章例子
include &#39;IXR_Library.php&#39;;

$url = &#39;http://www.wp.dev/xmlrpc.php&#39;;
$blog_id = 1;
$username = &#39;admin&#39;;
$password = &#39;admin&#39;;


$data = array(
    &#39;post_type&#39; =&amp;gt; &#39;post&#39;,
    &#39;post_content&#39; =&amp;gt; &#39;hello, world&#39;,
    &#39;post_title&#39; =&amp;gt; &#39;hello!!&#39;
);

$params = array($blog_id, $username, $password, $data);


$client = new IXR_Client($url);

$client-&amp;gt;query(&#39;wp.newPost&#39;, $params);
//$client-&amp;gt;query(&#39;demo.sayHello&#39;);
$r = $client-&amp;gt;getResponse();

print_r($r);

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>wordpress 错误日志开启</title>
      <link>http://blog.dadajun.com/1/100/</link>
      <pubDate>Mon, 10 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dadajun.com/1/100/</guid>
      <description>&lt;pre&gt;&lt;code&gt;
&amp;lt;?php

define(&#39;WP_DEBUG&#39;, true);
define(&#39;WP_DEBUG_DISPLAY&#39;, false);
define(&#39;WP_DEBUG_LOG&#39;, true);


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>更简单的多维数组转码方式</title>
      <link>http://blog.dadajun.com/3/98/</link>
      <pubDate>Wed, 29 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dadajun.com/3/98/</guid>
      <description>&lt;p&gt;最近在开发一个采集工具。数据要保存到csv。要把多维数组的utf8数据转为gbk , 第一反应是用递归去转码。后来想想var_export 可以返回一个变量的字符串 。那样就可以直接转码！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class Csv {
    public static function put($filename, $fields) {

        eval(&#39;$fields = &#39; . iconv(&amp;quot;UTF-8&amp;quot;, &amp;quot;GBK&amp;quot; . &#39;//IGNORE&#39;, var_export($fields, TRUE)) . &#39;;&#39;);
        $fp = fopen($filename, &#39;a&#39;) or die(&amp;quot;Can&#39;t open {$filename} \n&amp;quot;);
        while (1) {
            if (flock($fp, LOCK_EX)) {
                fputcsv($fp, $fields);
                flock($fp, LOCK_UN);
                break;
            } else {
                sleep(1);
            }
        }
        fclose($fp);
    }
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Linux服务器批量添加ip</title>
      <link>http://blog.dadajun.com/1/99/</link>
      <pubDate>Mon, 27 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dadajun.com/1/99/</guid>
      <description>&lt;p&gt;由于业务需要， 需要在一台服务器添加100多个ip。简单写了一个shell。然后把它加到rc.local。这样机器重启也可以生效。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#!/bin/sh
DEVICE_PREFIX=ens33
IP_FILE=/root/ips.txt
IP_LENGTH=`cat $IP_FILE | wc -l`
MASK=255.255.255.0
for i in `seq $IP_LENGTH`
do
    DEVICE_NAME=$DEVICE_PREFIX&amp;quot;:&amp;quot;$i
    IP_ADDRESS=`sed -n ${i}&amp;quot;p&amp;quot; $IP_FILE`
    if [ -z &amp;quot;$IP_ADDRESS&amp;quot; ];then
        continue
    fi
    ifconfig $DEVICE_NAME $IP_ADDRESS netmask $MASK up
done

#/etc/rc.local

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>去除文件bom头</title>
      <link>http://blog.dadajun.com/4/77/</link>
      <pubDate>Thu, 25 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dadajun.com/4/77/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#查找bom头文件
grep -r -I -l $&#39;^\xEF\xBB\xBF&#39; ./

#去除bom
find . -type f -exec sed -i &#39;s/\xEF\xBB\xBF//&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Linux 常用信号</title>
      <link>http://blog.dadajun.com/2/15/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dadajun.com/2/15/</guid>
      <description>&lt;pre&gt;&lt;code&gt;# 查看信号列表
kill -l

### 经常用到的信号
SIGTERM == 15 == kill pid  #进程终止（默认信号）  
SIGINT == 2 == Ctrl-C # 键盘产生的中断  
SIGKILL == 9 == kill -9 pid #强制进程终止  

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Linux 冷门但是很酷的命令</title>
      <link>http://blog.dadajun.com/4/18/</link>
      <pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dadajun.com/4/18/</guid>
      <description>&lt;pre&gt;&lt;code&gt;alt + . 获取上一条命令的最后一个参数
alt + 退格 删除最后一个单词
Ctrl + R 搜索命令历史
!!执行上一条命令 。 最经常就是用来 sudo !!

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>vim 常用快捷键</title>
      <link>http://blog.dadajun.com/2/vim/</link>
      <pubDate>Tue, 10 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dadajun.com/2/vim/</guid>
      <description>

&lt;h3 id=&#34;jsbeautify:06a5fa759d42479fba23ece5dc900b51&#34;&gt;Jsbeautify&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    ,ff
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;commenter:06a5fa759d42479fba23ece5dc900b51&#34;&gt;Commenter&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    ,cc 注释
    ,cu 取消注释
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;easymotion:06a5fa759d42479fba23ece5dc900b51&#34;&gt;Easymotion&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    ,e
    ,w
    ,b
    ,z char
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;nerdtree:06a5fa759d42479fba23ece5dc900b51&#34;&gt;Nerdtree&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    C 设置当前目录
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;折叠:06a5fa759d42479fba23ece5dc900b51&#34;&gt;折叠&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    zf%
    zc 关闭折叠
    zd 删除折叠
    zr 展开所有
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;emmet还提供了连写-e-n-和自动编号-e-n-功能:06a5fa759d42479fba23ece5dc900b51&#34;&gt;Emmet还提供了连写（E*N）和自动编号（E$*N）功能。&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    1. E 代表HTML标签。
    2. E#id 代表id属性。
    3. E.class 代表class属性。
    4. E[attr=foo] 代表某一个特定属性。
    5. E{foo} 代表标签包含的内容是foo。
    6. E&amp;gt;N 代表N是E的子元素。
    7. E+N 代表N是E的同级元素。
    8. E^N 代表N是E的上级元素。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;替换:06a5fa759d42479fba23ece5dc900b51&#34;&gt;替换&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    :[rage]substitute/from/to/[flags]
    命令的前面加% 表示作用于全部行
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;常用快捷键:06a5fa759d42479fba23ece5dc900b51&#34;&gt;常用快捷键&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    ``返回原来的位置
    gf 找到文件的位置
    gd 找到函数 或者变量的定义处
    shift+#调到函数定义的地方
    cw .    点是重复上一次命令
    * 搜索下一个单词

    nerdtree  中 p 父节点  P根节点   o 开关
    bn下一个文件缓存
    bp上一个文件缓存

    ctrlp
    C+f 各个切换
    set key=
    :f filename 另存为
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;文件对比:06a5fa759d42479fba23ece5dc900b51&#34;&gt;文件对比&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    vim -d file1 file2
    diffs file
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;看小说:06a5fa759d42479fba23ece5dc900b51&#34;&gt;看小说&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    :,$p  就变成more 状态 可以用 空格分页 jk上下移动
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;调用外部命令:06a5fa759d42479fba23ece5dc900b51&#34;&gt;调用外部命令&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    :r !date
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>